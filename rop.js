class rop{constructor(a=524288,b=65536){this.stack_size=a,this.reserved_stack=b,this.stack_dwords=a/4,this.reserved_stack_index=this.reserved_stack/4,this.stack_memory=p.malloc(this.stack_dwords+2+512),this.stack_array=this.stack_memory.backing,this.stack_entry_point=this.stack_memory.add32(this.reserved_stack),this.return_value=this.stack_memory.add32(this.stack_size),this.initial_count=0,this.count=0,this.branches=this.return_value.add32(8),this.branches_count=0,this.branch_types={EQUAL:3228928,ABOVE:3228929,BELOW:3228930,GREATER:3228931,LESSER:3228932}}set_initial_count(a){this.initial_count=a,0==this.count&&(this.count=this.initial_count)}clear(){this.count=this.initial_count,this.branches_count=0;for(let a=0;a<this.stack_dwords;a++)this.stack_array[a]=0}increment_stack(){return this.count++}set_entry(a,b){b instanceof int64?(this.stack_array[this.reserved_stack_index+2*a]=b.low,this.stack_array[this.reserved_stack_index+2*a+1]=b.hi):"number"==typeof b?(this.stack_array[this.reserved_stack_index+2*a]=b,this.stack_array[this.reserved_stack_index+2*a+1]=0,4294967295<b&&alert("you're trying to write a value exceeding 32-bits without using a int64 instance")):alert("You're trying to write a non number/non int64 value?")}push(a){this.set_entry(this.increment_stack(),a)}push_write4(a,b){this.push(gadgets["pop rdi"]),this.push(a),this.push(gadgets["pop rax"]),this.push(b),this.push(gadgets["mov [rdi], eax"])}push_write8(a,b){this.push(gadgets["pop rdi"]),this.push(a),this.push(gadgets["pop rsi"]),this.push(b),this.push(gadgets["mov [rdi], rsi"])}write_result(a){this.push(gadgets["pop rdi"]),this.push(a),this.push(gadgets["mov [rdi], rax"])}write_result4(a){this.push(gadgets["pop rdi"]),this.push(a),this.push(gadgets["mov [rdi], eax"])}push_sysv(a,b,c,d,e,f){a!=null&&(this.push(gadgets["pop rdi"]),this.push(a)),b!=null&&(this.push(gadgets["pop rsi"]),this.push(b)),c!=null&&(this.push(gadgets["pop rdx"]),this.push(c)),d!=null&&(this.push(gadgets["pop rcx"]),this.push(d)),e!=null&&(this.push(gadgets["pop r8"]),this.push(e)),f!=null&&(this.push(gadgets["pop r9"]),this.push(f))}fcall(a,b,c,d,e,f,g){this.push_sysv(b,c,d,e,f,g),8&this.stack_entry_point.add32(8*this.count).low&&this.push(gadgets.ret),this.push(a)}get_rsp(){return this.stack_entry_point.add32(8*this.count)}jmp_to_rsp(a){this.push(gadgets["pop rsp"]),this.push(a)}self_healing_syscall(a,b,c,d,e,f,g){this.push_sysv(b,c,d,e,f,g);let h=this.get_rsp();this.push(gadgets.ret),this.push(gadgets.ret),this.push(gadgets.ret),8&this.stack_entry_point.add32(8*this.count).low&&(this.push(gadgets.ret),h.add32inplace(8)),this.push(syscalls[a]),this.push_write8(h,gadgets.ret),this.push_write8(h.add32(8),gadgets.ret),this.push_write8(h.add32(16),gadgets.ret),this.push_write8(h.add32(24),syscalls[a])}push_inc8(a,b){this.push(gadgets["pop rdi"]),this.push(a),this.push(gadgets["pop rax"]),this.push(a),this.push(gadgets["mov rax, [rax]"]),this.push(gadgets["pop rdx"]),this.push(b),this.push(gadgets["add rax, rdx"]),this.push(gadgets["mov [rdi], rax"])}get_branch(){return this.branches.add32(16*this.branches_count++)}create_branch(a,b,c){let d=this.get_branch();this.push(gadgets["pop rcx"]),this.push(b),this.push(gadgets["pop rax"]),this.push(c),this.push(gadgets["cmp [rcx], eax"]),this.push(gadgets["pop rax"]),this.push(0),a==this.branch_types.EQUAL?this.push(gadgets["sete al"]):a==this.branch_types.ABOVE?this.push(gadgets["seta al"]):a==this.branch_types.BELOW?this.push(gadgets["setb al"]):a==this.branch_types.GREATER?this.push(gadgets["setg al"]):a==this.branch_types.LESSER?this.push(gadgets["setl al"]):alert("illegal branch type."),this.push(gadgets["shl rax, 3"]),this.push(gadgets["pop rdx"]),this.push(d),this.push(gadgets["add rax, rdx"]),this.push(gadgets["mov rax, [rax]"]),this.push(gadgets["pop rdi"]);let e=this.increment_stack();this.push(gadgets["mov [rdi], rax"]),this.push(gadgets["pop rsp"]);let f=this.get_rsp();return this.increment_stack(),this.set_entry(e,f),d}set_branch_points(a,b,c){p.write8(a.add32(0),c),p.write8(a.add32(8),b)}increment_dword(a){this.push(gadgets["pop rax"]),this.push(a),this.push(gadgets["inc dword [rax]"])}}class worker_rop extends rop{constructor(a,b){super(a,b),p.pre_chain(this)}clear(){super.clear(),p.pre_chain(this)}async call(a,b,c,d,e,f,g){return this.fcall(a,b,c,d,e,f,g),this.write_result(this.return_value),await this.run(),p.read8(this.return_value)}async syscall(a,b,c,d,e,f,g){return await this.call(syscalls[a],b,c,d,e,f,g)}async add_syscall(a,b,c,d,e,f,g){this.fcall(syscalls[a],b,c,d,e,f,g)}async add_syscall_ret(a,b,c,d,e,f,g,h){this.fcall(syscalls[b],c,d,e,f,g,h),this.write_result(a)}async run(){await p.launch_chain(this),this.clear()}}class thread_rop extends rop{constructor(a="rop_thread",b,c){super(b,c),this.set_initial_count(1),p.write8(this.stack_memory,gadgets.ret),p.write8(this.stack_memory.add32(8),0),p.write8(this.stack_memory.add32(16),this.stack_entry_point),p.write8(this.stack_memory.add32(24),0),p.write8(this.stack_memory.add32(32),0),p.write8(this.stack_memory.add32(40),0),p.write8(this.stack_memory.add32(48),0),p.write8(this.stack_memory.add32(56),0),p.write4(this.stack_memory.add32(64),895),p.write4(this.stack_memory.add32(68),40928),p.writestr(this.stack_memory.add32(80),a)}async spawn_thread(){return this.fcall(libKernelBase.add32(OFFSET_lk_pthread_exit),1145128260),await chain.call(libKernelBase.add32(OFFSET_lk_pthread_create_name_np),this.stack_memory.add32(72),0,libSceLibcInternalBase.add32(OFFSET_lc_longjmp),this.stack_memory,this.stack_memory.add32(80)),p.read8(this.stack_memory.add32(72))}}