let mem=null;function init_module(a){mem=a}class Addr extends Int{read8(a){const b=this.add(a);return mem.read8(b)}read16(a){const b=this.add(a);return mem.read16(b)}read32(a){const b=this.add(a);return mem.read32(b)}read64(a){const b=this.add(a);return mem.read64(b)}readp(a){const b=this.add(a);return mem.readp(b)}write8(a,b){const c=this.add(a);mem.write8(c,b)}write16(a,b){const c=this.add(a);mem.write16(c,b)}write32(a,b){const c=this.add(a);mem.write32(c,b)}write64(a,b){const c=this.add(a);mem.write64(c,b)}}class MemoryBase{_addrof(a){if("object"!=typeof a&&"function"!=typeof a)throw TypeError("addrof argument not a JS object");this.worker.a=a,write64(this.main,view_m_vector,this.butterfly.sub(16));let b=read64(this.worker,0);return write64(this.main,view_m_vector,this._current_addr),b}addrof(a){return new Addr(this._addrof(a))}set_addr(a){if(!(a instanceof Int))throw TypeError("addr must be an Int");this._current_addr=a,write64(this.main,view_m_vector,this._current_addr)}get_addr(){return this._current_addr}write0(a,b,c){const d=b+1;if(4294967296<=d||0>d)throw RangeError(`read0() invalid offset: ${b}`);switch(this.set_addr(new Int(-1)),a){case 8:this.worker[d]=c;case 16:write16(this.worker,d,c);case 32:write32(this.worker,d,c);case 64:write64(this.worker,d,c);default:throw RangeError(`write0() invalid size: ${a}`);}}read8(a){return this.set_addr(a),this.worker[0]}read16(a){return this.set_addr(a),read16(this.worker,0)}read32(a){return this.set_addr(a),read32(this.worker,0)}read64(a){return this.set_addr(a),read64(this.worker,0)}readp(a){return new Addr(this.read64(a))}write8(a,b){this.set_addr(a),this.worker[0]=b}write16(a,b){this.set_addr(a),write16(this.worker,0,b)}write32(a,b){this.set_addr(a),write32(this.worker,0,b)}write64(a,b){this.set_addr(a),write64(this.worker,0,b)}}class Memory extends MemoryBase{constructor(a,b){super(),this.main=a,this.worker=b,b.a=0,this.butterfly=read64(a,js_butterfly),write32(a,view_m_length,4294967295),this._current_addr=Int.Zero,init_module(this)}}